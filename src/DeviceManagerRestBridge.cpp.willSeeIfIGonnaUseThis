
#include "DeviceManagerRestBridge.h"
#include "DeviceManager.h"

namespace DeviceManagerRestBridge
{
    std::string lastError;

    WEBSERVER_TYPE *webserver = nullptr;

    void begin(WEBSERVER_TYPE &srv) {
        webserver = &srv;
        srv.on(DEVICE_MANAGER_URL_RELOAD_JSON, HTTP_GET, reloadJSON);
        if (readJson() == false)
        {
            String message = "Device Manager - LOAD JSON fail<br>" + String(lastError.c_str());
            DEBUG_UART.println(message);
        }
        else
        {
            DEBUG_UART.println("Device Manager - LOAD JSON ok");
        }   
    }

    void reloadJSON()
    {
        if (!webserver->chunkedResponseModeStart(200, "text/html")) {
            webserver->send(505, F("text/html"), F("HTTP1.1 required"));
            return;
        }
        webserver->sendContent("LOAD JSON start<br>");
        if (readJson())
            webserver->sendContent("LOAD JSON ok<br>");
        else {
            String message = "LOAD JSON fail<br>" + String(lastError.c_str());
            webserver->sendContent(message);
        }
        webserver->chunkedResponseFinalize();
    }

    bool readJson()
    {
        lastError = "";
        if (!LittleFS.exists(DEVICE_MANAGER_FILES_PATH))
        {
            LittleFS.mkdir(DEVICE_MANAGER_FILES_PATH);
            lastError = "dir did not exist";
            return false;
        }
        if (LittleFS.exists(DEVICE_MANAGER_CONFIG_JSON_FILE) == false) {
            lastError = "cfg file did not exist";
            return false;
        }
        int size = LittleFS_ext::getFileSize(DEVICE_MANAGER_CONFIG_JSON_FILE);
        char jsonBuffer[size + 1]; // +1 for null char
        if (LittleFS_ext::load_from_file(DEVICE_MANAGER_CONFIG_JSON_FILE, jsonBuffer) == false)
        {
            lastError = "error could not load json file";
            return false;
        }
        DynamicJsonDocument jsonDoc(size*2);
        DeserializationError error = deserializeJson(jsonDoc, jsonBuffer);
        if (error)
        {
            lastError = "deserialization failed: " + std::string(error.c_str());
            return false;
        }
        DEBUG_UART.print("jsonDoc.memoryUsage="); DEBUG_UART.print(jsonDoc.memoryUsage()); DEBUG_UART.print(" of "); DEBUG_UART.println(jsonDoc.capacity());
        if (!jsonDoc.is<JsonArray>()) {
            lastError = "jsonDoc root is not a JsonArray\n";
            return false;
        }
        lastError = "";
        JsonArray jsonItems = jsonDoc.as<JsonArray>();
        if (jsonItems == nullptr) {
            lastError = "jsonDoc root could not convert to a JsonArray\n";
            return false;
        }
        // TODO: implement the rest of the JSON parsing logic
    }
}